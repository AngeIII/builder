.vce-button--style-double-outline-container {
  &--align-left {
    text-align: left;
  }

  &--align-right {
    text-align: right;
  }

  &--align-center {
    text-align: center;
  }
}

.vce-button--style-double-outline-wrapper {
  display: inline-block;
  vertical-align: top;
  max-width: 100%;
}

// Styles for Buttons
//-----------------------------------------

// By default .vce-button does not look like much. It will be a basic text with hover cursor
.vce-button--style-double-outline {
  font-size: @vce-button-font-size;
  padding: @vce-button-padding-vertical @vce-button-padding-horizontal;

  a&,
  button& {
    background-color: transparent;
    background-image: none;
    box-sizing: border-box;
    cursor: pointer;
    display: inline-block;
    margin-bottom: 0;
    max-width: 100%;
    // If the contnet of the button is more than the containers, the text will break normally
    position: relative;
    text-align: center;
    text-decoration: none;
    vertical-align: middle;
    white-space: normal;
    touch-action: manipulation;
    user-select: none;
    // fix for transition if the background has a background-color property
    z-index: 1;
    transition: all @vce-button-outline-transition-duration @vce-button-outline-transition-timing-function;
    // fix for transition if the background has a background-color property
    border-radius: 0;
    border-style: @vce-button-double-line-border-style;
    border-width: @vce-button-double-line-border-width;

    &:hover,
    &:focus {
      text-decoration: none;
      outline: none;
    }


    //&:hover, &:active, &:focus {
    //  border: @vce-button-double-line-border-width @vce-button-outline-border-style @vce-button-color-border-hover;
    //  &::before {
    //    border: @vce-button-double-line-border-width @vce-button-outline-border-style @vce-button-color-border-hover;
    //  }
    //}


    &::before, &::after {
      // Inherit the border radius from the parent element.
      border-radius: inherit;
      box-sizing: border-box;
      content: "";
      position: absolute;
      transition: all @vce-button-outline-transition-duration @vce-button-outline-transition-timing-function;
      height: 100%;
      top: 0;
      left: 0;
    }

    /*The before element simulates border*/
    &::before {
      border-width: @vce-button-double-line-border-width;
      border-style: @vce-button-outline-border-style;
      bottom: 1px;
      box-sizing: border-box;
      height: auto;
      left: 1px;
      right: 1px;
      top: 1px;
      width: auto;
      z-index: @vce-button-double-line-z-background;
    }

    &::after {
      width: 100%;
      opacity: 0;
      z-index: @vce-button-double-line-z-overlay;
    }

    &:hover, &:active, &:focus {
      &::after {
        opacity: 1;
      }
    }
  }

  &--border {
    &-rounded, &-round {
      &,
      a&,
      button& {
        position: relative;
        overflow: hidden;
      }
    }
    &-rounded {
      &,
      a&,
      button& {
        border-radius: @vce-button-rounded;
      }
    }

    &-round {
      &,
      a&,
      button& {
        border-radius: @vce-button-round;
      }
    }
  }
}



// RTL support
.rtl,
[dir="rlt"] {
  &.vce-button--style-double-outline,
  .vce-button--style-double-outline {
    direction: rtl;
    unicode-bidi: embed;
  }
}

// LTR
.ltr,
[dir="ltr"] {
  &.vce-button--style-double-outline,
  .vce-button--style-double-outline {
    direction: ltr;
    unicode-bidi: normal;
  }
}





// RTL support
.rtl,
[dir="rlt"] {
  &.vce-button--style-outline,
  .vce-button--style-outline {
    direction: rtl;
    unicode-bidi: embed;
  }
}

// LTR
.ltr,
[dir="ltr"] {
  &.vce-button--style-outline,
  .vce-button--style-outline {
    direction: ltr;
    unicode-bidi: normal;
  }
}



